digraph FlowNexusNeuralTraining {
    rankdir=TB;
    node [shape=box, style="rounded,filled", fillcolor=lightblue, fontname="Arial"];
    edge [fontname="Arial", fontsize=10];

    // Define color scheme
    start [label="Start\nNeural Training", shape=ellipse, fillcolor=lightgreen];
    end [label="Model\nDeployed", shape=ellipse, fillcolor=lightgreen];

    // Phase 1: Setup Flow Nexus
    subgraph cluster_phase1 {
        label="Phase 1: Setup Flow Nexus (5-10 min)";
        style=filled;
        fillcolor=lightyellow;

        auth [label="Authenticate\nFlow Nexus"];
        init_cluster [label="Initialize\nNeural Cluster"];
        create_config [label="Create\nConfiguration"];
        store_context [label="Store Memory\nContext"];

        auth -> init_cluster;
        init_cluster -> create_config;
        create_config -> store_context;
    }

    // Phase 2: Configure Neural Network
    subgraph cluster_phase2 {
        label="Phase 2: Configure Neural Network (10-15 min)";
        style=filled;
        fillcolor=lightcyan;

        design_arch [label="Design\nArchitecture"];
        deploy_workers [label="Deploy\nWorker Nodes"];
        deploy_param [label="Deploy\nParameter Server"];
        deploy_valid [label="Deploy\nValidators"];
        connect_topo [label="Connect Mesh\nTopology"];
        create_script [label="Create Training\nScript"];

        design_arch -> deploy_workers;
        deploy_workers -> deploy_param;
        deploy_param -> deploy_valid;
        deploy_valid -> connect_topo;
        connect_topo -> create_script;
    }

    // Phase 3: Train Model
    subgraph cluster_phase3 {
        label="Phase 3: Train Model (20-40 min)";
        style=filled;
        fillcolor=lightpink;

        prep_dataset [label="Prepare\nDataset"];
        start_training [label="Start Distributed\nTraining"];
        monitor [label="Monitor\nProgress"];
        checkpoint [label="Save\nCheckpoints"];
        converge [label="Training\nConverged?", shape=diamond, fillcolor=lightyellow];
        store_metrics [label="Store Final\nMetrics"];

        prep_dataset -> start_training;
        start_training -> monitor;
        monitor -> checkpoint;
        checkpoint -> converge;
        converge -> monitor [label="No", color=red];
        converge -> store_metrics [label="Yes", color=green];
    }

    // Phase 4: Validate Results
    subgraph cluster_phase4 {
        label="Phase 4: Validate Results (5-10 min)";
        style=filled;
        fillcolor=lightgoldenrod;

        run_validation [label="Run Validation\nTests"];
        benchmark [label="Performance\nBenchmarks"];
        test_inference [label="Test Distributed\nInference"];
        check_quality [label="Quality\nChecks Pass?", shape=diamond, fillcolor=lightyellow];
        generate_report [label="Generate\nPerformance Report"];

        run_validation -> benchmark;
        benchmark -> test_inference;
        test_inference -> check_quality;
        check_quality -> generate_report [label="Yes", color=green];
        check_quality -> design_arch [label="No\nRe-train", color=red, style=dashed];
    }

    // Phase 5: Deploy to Production
    subgraph cluster_phase5 {
        label="Phase 5: Deploy to Production (5-15 min)";
        style=filled;
        fillcolor=lightsteelblue;

        create_metadata [label="Create Model\nMetadata"];
        publish_template [label="Publish\nTemplate"];
        create_docker [label="Create\nDockerfile"];
        create_api [label="Implement\nServing API"];
        deploy_script [label="Create Deploy\nScript"];
        setup_monitor [label="Setup\nMonitoring"];
        test_deploy [label="Test\nDeployment"];

        create_metadata -> publish_template;
        publish_template -> create_docker;
        create_docker -> create_api;
        create_api -> deploy_script;
        deploy_script -> setup_monitor;
        setup_monitor -> test_deploy;
    }

    // Main workflow connections
    start -> auth;
    store_context -> design_arch;
    create_script -> prep_dataset;
    store_metrics -> run_validation;
    generate_report -> create_metadata;
    test_deploy -> end;

    // Agent annotations
    subgraph cluster_agents {
        label="Agents";
        style=filled;
        fillcolor=white;

        ml_dev [label="ml-developer\n(Architecture, Validation)", shape=box, fillcolor=lightcoral];
        flow_nexus [label="flow-nexus-neural\n(Platform, Training)", shape=box, fillcolor=lightseagreen];
        cicd [label="cicd-engineer\n(Deployment, Monitoring)", shape=box, fillcolor=lightskyblue];
    }

    // Agent responsibilities (invisible edges for layout)
    ml_dev -> design_arch [style=invis];
    flow_nexus -> init_cluster [style=invis];
    cicd -> create_docker [style=invis];

    // Memory coordination points
    memory1 [label="Memory:\ncluster-id\nconfig", shape=note, fillcolor=wheat];
    memory2 [label="Memory:\narchitecture\nnodes-deployed", shape=note, fillcolor=wheat];
    memory3 [label="Memory:\ntraining-job-id\ntraining-metrics", shape=note, fillcolor=wheat];
    memory4 [label="Memory:\nbenchmark-results\nvalidation", shape=note, fillcolor=wheat];
    memory5 [label="Memory:\ndeployment-ready\nworkflow-complete", shape=note, fillcolor=wheat];

    store_context -> memory1 [style=dotted, color=gray];
    create_script -> memory2 [style=dotted, color=gray];
    store_metrics -> memory3 [style=dotted, color=gray];
    generate_report -> memory4 [style=dotted, color=gray];
    test_deploy -> memory5 [style=dotted, color=gray];

    // Success criteria
    criteria [label="Success Criteria:\n✓ Accuracy ≥85%\n✓ Latency <100ms\n✓ No overfitting\n✓ Deployment verified",
              shape=box, fillcolor=palegreen];

    end -> criteria [style=dotted];
}
