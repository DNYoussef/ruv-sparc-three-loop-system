digraph DevelopmentSwarmLoop {
    rankdir=TB;
    compound=true;
    node [shape=box, style=filled, fontname="Arial"];
    edge [fontname="Arial"];

    // Start and end
    start [shape=ellipse, label="Start:\nLoad Loop 1 Plan", fillcolor=lightgreen];
    end [shape=ellipse, label="Complete:\nTheater-Free Code", fillcolor=green, fontcolor=white];

    // Step 1: Swarm Initialization
    subgraph cluster_init {
        label="Step 1: Swarm Initialization";
        fillcolor=lightyellow;
        style=filled;

        init1 [label="Initialize\nHierarchical Topology\n(54 agents)"];
        init2 [label="Configure\nDual Memory\n(SQLite + Redis)"];
        init3 [label="Load Loop 1\nPlanning Data"];

        init1 -> init2 -> init3;
    }

    // Step 2: Agent Discovery
    subgraph cluster_discovery {
        label="Step 2: Agent Discovery";
        fillcolor=lightblue;
        style=filled;

        disc1 [label="Query Agent\nRegistry (54 total)"];
        disc2 [label="Discover MCP\nServer Tools"];
        disc3 [label="Create Capability\nMatrix"];

        disc1 -> disc2 -> disc3;
    }

    // Step 3: MECE Task Division
    subgraph cluster_mece {
        label="Step 3: MECE Task Division";
        fillcolor=lightcyan;
        style=filled;

        mece1 [label="Apply MECE\nDecomposition"];
        mece_check [shape=diamond, label="Mutually\nExclusive?", fillcolor=yellow];
        mece2 [label="Resolve\nOverlaps"];
        mece_check2 [shape=diamond, label="Collectively\nExhaustive?", fillcolor=yellow];
        mece3 [label="Add Missing\nTasks"];
        mece4 [label="Generate\nDependency Graph"];

        mece1 -> mece_check;
        mece_check -> mece2 [label="no", color=red];
        mece_check -> mece_check2 [label="yes", color=green];
        mece2 -> mece_check [style=dashed];
        mece_check2 -> mece3 [label="no", color=red];
        mece_check2 -> mece4 [label="yes", color=green];
        mece3 -> mece_check2 [style=dashed];
    }

    // Step 4: Parallel Deployment
    subgraph cluster_deploy {
        label="Step 4: Parallel Deployment (11 agents)";
        fillcolor=lightsalmon;
        style=filled;

        deploy1 [label="Spawn Agents\nvia Task Tool\n(Single Message)"];
        deploy2 [label="Configure Memory\nCoordination"];
        deploy3 [label="Monitor Parallel\nExecution\n(8.3x speedup)"];

        deploy1 -> deploy2 -> deploy3;
    }

    // Step 5: Theater Detection
    subgraph cluster_theater {
        label="Step 5: Theater Detection";
        fillcolor=orange;
        style=filled;

        theater1 [label="Run Theater Scan\n(/theater:scan)"];
        theater_decision [shape=diamond, label="Theater\nDetected?", fillcolor=yellow];
        theater2 [label="Generate Theater\nReport"];
        theater3 [label="Assign Repair\nTasks to Agents"];
        theater4 [label="Reality Check\n(Sandbox Execution)"];

        theater1 -> theater_decision;
        theater_decision -> theater2 [label="yes\n(CRITICAL)", color=red];
        theater2 -> theater3 -> theater4;
        theater4 -> theater1 [label="re-scan", style=dashed];
    }

    // Step 6: Integration Loop
    subgraph cluster_integration {
        label="Step 6: Integration Loop (Until 100%)";
        fillcolor=lightgreen;
        style=filled;

        int_start [shape=ellipse, label="Integration\nCycle Start", fillcolor=yellow];
        int1 [label="Deploy to\nSandbox"];
        int2 [label="Run Integration\nTests"];
        int_decision [shape=diamond, label="100%\nSuccess?", fillcolor=yellow];
        int3 [label="Analyze\nFailures"];
        int4 [label="Spawn Repair\nAgents"];

        int_start -> int1 -> int2 -> int_decision;
        int_decision -> int3 [label="no", color=red];
        int3 -> int4 -> int1 [style=dashed];
    }

    // Steps 7-9: Documentation, Testing, Cleanup
    subgraph cluster_finalization {
        label="Steps 7-9: Documentation, Test Validation, Cleanup";
        fillcolor=lightcyan;
        style=filled;

        final1 [label="Update All\nDocumentation"];
        final2 [label="Validate Test\nQuality (â‰¥90%)"];
        final3 [label="Cleanup Temp\nArtifacts"];
        final4 [label="Generate Delivery\nPackage"];

        final1 -> final2 -> final3 -> final4;
    }

    // External references
    loop1 [shape=cylinder, label="Loop 1:\nPlanning Package", fillcolor=lightcoral];
    loop3 [shape=cylinder, label="Loop 3:\nCI/CD Quality", fillcolor=lightcoral];

    // Main flow
    start -> init1 [lhead=cluster_init];
    init3 -> disc1 [ltail=cluster_init, lhead=cluster_discovery];
    disc3 -> mece1 [ltail=cluster_discovery, lhead=cluster_mece];
    mece4 -> deploy1 [ltail=cluster_mece, lhead=cluster_deploy];
    deploy3 -> theater1 [ltail=cluster_deploy, lhead=cluster_theater];
    theater_decision -> int_start [label="no\n(PASS)", color=green, lhead=cluster_integration];
    int_decision -> final1 [label="yes", color=green, lhead=cluster_finalization];
    final4 -> end [ltail=cluster_finalization];

    // Integration points
    loop1 -> start [label="provides\nplanning data", style=dashed, color=blue];
    end -> loop3 [label="feeds\nimplementation", style=dashed, color=blue];

    // Critical warnings
    warning1 [shape=octagon, label="STOP:\nTheater Detected", fillcolor=red, fontcolor=white];
    theater_decision -> warning1 [style=dashed, color=red];
    warning1 -> theater2 [label="must fix"];

    labelloc="t";
    label="Loop 2: Development & Implementation Process\n9-Step Multi-Agent Swarm with Theater Detection";
    fontsize=16;
    fontname="Arial Bold";
}
