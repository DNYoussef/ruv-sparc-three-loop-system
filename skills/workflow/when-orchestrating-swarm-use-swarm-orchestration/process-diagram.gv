digraph SwarmOrchestration {
  rankdir=TB;
  node [shape=box, style=rounded];

  start [label="Start:\nSwarm\nOrchestration", shape=ellipse, style=filled, fillcolor=lightgreen];

  phase1 [label="Phase 1:\nPlan\nOrchestration", style=filled, fillcolor=lightblue];
  phase2 [label="Phase 2:\nInitialize\nSwarm", style=filled, fillcolor=lightblue];
  phase3 [label="Phase 3:\nOrchestrate\nExecution", style=filled, fillcolor=lightblue];
  phase4 [label="Phase 4:\nMonitor\nProgress", style=filled, fillcolor=lightblue];
  phase5 [label="Phase 5:\nSynthesize\nResults", style=filled, fillcolor=lightblue];

  end [label="End:\nResults\nSynthesized", shape=ellipse, style=filled, fillcolor=lightgreen];

  // Phase 1 details
  p1_analyze [label="Analyze Task\nComplexity"];
  p1_decompose [label="Create\nDecomposition Tree"];
  p1_dependencies [label="Map\nDependencies"];
  p1_plan [label="Plan Agent\nAssignments"];

  // Phase 2 details
  p2_topology [label="Select Optimal\nTopology"];
  p2_init [label="Initialize\nSwarm"];
  p2_coordinators [label="Spawn\nCoordinators"];

  // Phase 3 details
  p3_spawn [label="Spawn\nSpecialized Agents"];
  p3_assign [label="Assign Tasks\nby Dependencies"];
  p3_execute [label="Execute\nDistributed Workload"];

  // Phase 4 details
  p4_track [label="Track Task\nCompletion"];
  p4_blockers [label="Identify\nBlockers"];
  p4_health [label="Monitor Agent\nHealth"];

  // Phase 5 details
  p5_collect [label="Collect Task\nResults"];
  p5_aggregate [label="Aggregate by\nCategory"];
  p5_validate [label="Validate\nOutputs"];
  p5_report [label="Generate Final\nReport"];

  // Main flow
  start -> phase1 -> phase2 -> phase3 -> phase4 -> phase5 -> end;

  // Phase flows
  phase1 -> p1_analyze -> p1_decompose -> p1_dependencies -> p1_plan -> phase2;
  phase2 -> p2_topology -> p2_init -> p2_coordinators -> phase3;
  phase3 -> p3_spawn -> p3_assign -> p3_execute -> phase4;
  phase4 -> p4_track -> p4_blockers -> p4_health -> phase5;
  phase5 -> p5_collect -> p5_aggregate -> p5_validate -> p5_report -> end;

  // Agents
  agents [label="Agents:\n- task-orchestrator\n- hierarchical-coordinator\n- adaptive-coordinator", shape=component, style=filled, fillcolor=lightyellow];
  agents -> p2_coordinators [style=dashed];
  agents -> p3_assign [style=dashed];
}
