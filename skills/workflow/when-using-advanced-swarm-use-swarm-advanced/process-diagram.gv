digraph AdvancedSwarmCoordination {
  rankdir=TB;
  node [shape=box, style=rounded];

  // Main phases
  start [label="Start:\nAdvanced Swarm\nCoordination", shape=ellipse, style=filled, fillcolor=lightgreen];

  phase1 [label="Phase 1:\nInitialize Swarm\nInfrastructure", style=filled, fillcolor=lightblue];
  phase2 [label="Phase 2:\nConfigure\nTopology", style=filled, fillcolor=lightblue];
  phase3 [label="Phase 3:\nDeploy\nAgents", style=filled, fillcolor=lightblue];
  phase4 [label="Phase 4:\nMonitor\nPerformance", style=filled, fillcolor=lightblue];
  phase5 [label="Phase 5:\nOptimize\nDynamically", style=filled, fillcolor=lightblue];

  end [label="End:\nOptimized Swarm\nOperational", shape=ellipse, style=filled, fillcolor=lightgreen];

  // Phase 1 details
  p1_choose [label="Choose Initial\nTopology", shape=box];
  p1_init [label="Initialize Swarm\nwith MCP", shape=box];
  p1_verify [label="Verify\nInitialization", shape=box];
  p1_memory [label="Setup Memory\nCoordination", shape=box];
  p1_validate [label="Validate:\n✓ Swarm ID\n✓ Topology Confirmed\n✓ Health OK", shape=note];

  // Phase 2 details
  p2_spawn [label="Spawn Coordinator\nAgents", shape=box];
  p2_config [label="Configure Topology\nParameters", shape=box];
  p2_baseline [label="Establish Baseline\nMetrics", shape=box];
  p2_validate [label="Validate:\n✓ Coordinators Active\n✓ Config Correct\n✓ Metrics Recorded", shape=note];

  // Phase 3 details
  p3_determine [label="Determine Agent\nRequirements", shape=box];
  p3_spawn [label="Spawn Specialized\nAgents", shape=box];
  p3_assign [label="Assign Agents\nto Topology", shape=box];
  p3_verify [label="Verify Agent\nDeployment", shape=box];
  p3_validate [label="Validate:\n✓ All Agents Spawned\n✓ Roles Assigned\n✓ Connections OK", shape=note];

  // Phase 4 details
  p4_monitor [label="Start Continuous\nMonitoring", shape=box];
  p4_collect [label="Collect Agent\nMetrics", shape=box];
  p4_analyze [label="Analyze\nPerformance", shape=box];
  p4_report [label="Generate\nPerformance Report", shape=box];
  p4_validate [label="Validate:\n✓ Metrics Collected\n✓ Bottlenecks Identified\n✓ Report Generated", shape=note];

  // Phase 5 details
  p5_analyze [label="Analyze Optimization\nOpportunities", shape=box];
  p5_topology [label="Apply Topology\nSwitching", shape=box];
  p5_scale [label="Apply Scaling\nOptimizations", shape=box];
  p5_rebalance [label="Apply Agent\nRebalancing", shape=box];
  p5_neural [label="Apply Neural\nTraining", shape=box];
  p5_measure [label="Measure\nImprovements", shape=box];
  p5_validate [label="Validate:\n✓ Optimizations Applied\n✓ ≥15% Improvement\n✓ Final Report", shape=note];

  // Decision points
  decision_topology [label="Topology Switch\nNeeded?", shape=diamond, style=filled, fillcolor=yellow];
  decision_scale [label="Scaling\nNeeded?", shape=diamond, style=filled, fillcolor=yellow];
  decision_improved [label="Performance\nImproved?", shape=diamond, style=filled, fillcolor=yellow];

  // Agents
  agents [label="Agents:\n- hierarchical-coordinator\n- mesh-coordinator\n- adaptive-coordinator\n- researcher\n- coder\n- reviewer", shape=component, style=filled, fillcolor=lightyellow];

  // Main flow
  start -> phase1;
  phase1 -> phase2;
  phase2 -> phase3;
  phase3 -> phase4;
  phase4 -> phase5;
  phase5 -> end;

  // Phase 1 flow
  phase1 -> p1_choose;
  p1_choose -> p1_init;
  p1_init -> p1_verify;
  p1_verify -> p1_memory;
  p1_memory -> p1_validate;
  p1_validate -> phase2;

  // Phase 2 flow
  phase2 -> p2_spawn;
  p2_spawn -> p2_config;
  p2_config -> p2_baseline;
  p2_baseline -> p2_validate;
  p2_validate -> phase3;

  // Phase 3 flow
  phase3 -> p3_determine;
  p3_determine -> p3_spawn;
  p3_spawn -> p3_assign;
  p3_assign -> p3_verify;
  p3_verify -> p3_validate;
  p3_validate -> phase4;

  // Phase 4 flow
  phase4 -> p4_monitor;
  p4_monitor -> p4_collect;
  p4_collect -> p4_analyze;
  p4_analyze -> p4_report;
  p4_report -> p4_validate;
  p4_validate -> phase5;

  // Phase 5 flow
  phase5 -> p5_analyze;
  p5_analyze -> decision_topology;
  decision_topology -> p5_topology [label="Yes"];
  decision_topology -> decision_scale [label="No"];
  p5_topology -> decision_scale;

  decision_scale -> p5_scale [label="Yes"];
  decision_scale -> p5_rebalance [label="No"];
  p5_scale -> p5_rebalance;

  p5_rebalance -> p5_neural;
  p5_neural -> p5_measure;
  p5_measure -> decision_improved;

  decision_improved -> p5_validate [label="Yes"];
  decision_improved -> p5_analyze [label="No\nRetry"];
  p5_validate -> end;

  // Agent connections
  agents -> p2_spawn [style=dashed, color=blue];
  agents -> p3_spawn [style=dashed, color=blue];
  agents -> p4_collect [style=dashed, color=blue];
  agents -> p5_neural [style=dashed, color=blue];

  // Memory connections
  memory [label="Memory\nCoordination", shape=cylinder, style=filled, fillcolor=lightgray];
  memory -> p1_memory [style=dashed, color=green];
  memory -> p2_baseline [style=dashed, color=green];
  memory -> p4_collect [style=dashed, color=green];
  memory -> p5_measure [style=dashed, color=green];

  // MCP connections
  mcp [label="MCP Tools:\n- swarm_init\n- agent_spawn\n- swarm_monitor\n- neural_train", shape=folder, style=filled, fillcolor=lightcyan];
  mcp -> p1_init [style=dashed, color=red];
  mcp -> p2_spawn [style=dashed, color=red];
  mcp -> p4_monitor [style=dashed, color=red];
  mcp -> p5_neural [style=dashed, color=red];

  // Topology patterns
  topologies [label="Topology Patterns:\n- Hierarchical\n- Mesh\n- Star\n- Ring\n- Adaptive", shape=note, style=filled, fillcolor=pink];
  topologies -> p1_choose [style=dashed];
  topologies -> p2_config [style=dashed];
  topologies -> p5_topology [style=dashed];
}
