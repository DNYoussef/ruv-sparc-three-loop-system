// Debugging Assistant Agent Interaction Flow Diagram
// Render with Graphviz: dot -Tpng process-diagram.gv -o process-diagram.png

digraph DebuggingAssistant {
  // Graph settings
  rankdir=TB;
  node [shape=box, style=rounded, fontname="Arial"];
  edge [fontname="Arial", fontsize=10];

  // Color scheme
  node [fillcolor=lightblue, style="rounded,filled"];

  // User interaction
  User [label="User Reports Issue", shape=ellipse, fillcolor=lightyellow];

  // Phases
  subgraph cluster_phase1 {
    label="Phase 1: Symptom Identification";
    style=dashed;
    color=blue;

    P1_Start [label="Receive Issue\nDescription"];
    P1_Gather [label="Gather Context\n(logs, errors, steps)", shape=parallelogram];
    P1_Analyze [label="Analyze Symptoms\n(code-analyzer)", fillcolor=lightgreen];
    P1_Classify [label="Classify Issue\nType & Severity"];
    P1_Store [label="Store to Memory\ndebug/[id]/symptoms", shape=cylinder, fillcolor=lightyellow];
  }

  subgraph cluster_phase2 {
    label="Phase 2: Root Cause Analysis";
    style=dashed;
    color=green;

    P2_Load [label="Load Symptom Data", shape=cylinder, fillcolor=lightyellow];
    P2_Trace [label="Trace Execution\nPath", fillcolor=lightgreen];
    P2_Analyze [label="Analyze Data Flow\n(code-analyzer)", fillcolor=lightgreen];
    P2_Hypothesis [label="Formulate\nHypothesis"];
    P2_Verify [label="Verify with\nCode Analysis", fillcolor=lightgreen];
    P2_Store [label="Store Root Cause\ndebug/[id]/root-cause", shape=cylinder, fillcolor=lightyellow];
  }

  subgraph cluster_phase3 {
    label="Phase 3: Fix Generation";
    style=dashed;
    color=orange;

    P3_Load [label="Load Root Cause", shape=cylinder, fillcolor=lightyellow];
    P3_Generate [label="Generate 2-3\nApproaches (coder)", fillcolor=lightcoral];
    P3_Evaluate [label="Evaluate\nTrade-offs"];
    P3_Select [label="Select Optimal\nSolution"];
    P3_Implement [label="Implement Fix\n(coder)", fillcolor=lightcoral];
    P3_Store [label="Store Fix\ndebug/[id]/fix", shape=cylinder, fillcolor=lightyellow];
  }

  subgraph cluster_phase4 {
    label="Phase 4: Validation Testing";
    style=dashed;
    color=purple;

    P4_Load [label="Load Fix & Symptoms", shape=cylinder, fillcolor=lightyellow];
    P4_CreateTest [label="Create Test Case\n(tester)", fillcolor=plum];
    P4_VerifyFail [label="Verify Test Fails\nBefore Fix", shape=diamond, fillcolor=plum];
    P4_ApplyFix [label="Apply Fix"];
    P4_VerifyPass [label="Verify Test Passes\nAfter Fix", shape=diamond, fillcolor=plum];
    P4_Regression [label="Run Full\nTest Suite (tester)", fillcolor=plum];
    P4_Store [label="Store Results\ndebug/[id]/validation", shape=cylinder, fillcolor=lightyellow];
  }

  subgraph cluster_phase5 {
    label="Phase 5: Regression Prevention";
    style=dashed;
    color=red;

    P5_Load [label="Load Validation\nResults", shape=cylinder, fillcolor=lightyellow];
    P5_AddTest [label="Add Permanent\nTest (tester)", fillcolor=plum];
    P5_Document [label="Update Docs\n& Comments (coder)", fillcolor=lightcoral];
    P5_Monitor [label="Add Monitoring\n& Assertions"];
    P5_Similar [label="Find Similar\nPatterns (code-analyzer)", fillcolor=lightgreen];
    P5_Store [label="Store Prevention\ndebug/[id]/prevention", shape=cylinder, fillcolor=lightyellow];
  }

  // Final output
  Report [label="Generate Final\nReport", fillcolor=lightcyan];
  UserReview [label="User Reviews\nFix & Report", shape=ellipse, fillcolor=lightyellow];

  // Main flow
  User -> P1_Start;

  // Phase 1 flow
  P1_Start -> P1_Gather;
  P1_Gather -> P1_Analyze;
  P1_Analyze -> P1_Classify;
  P1_Classify -> P1_Store;

  // Phase 1 to Phase 2
  P1_Store -> P2_Load [label="Memory"];

  // Phase 2 flow
  P2_Load -> P2_Trace;
  P2_Trace -> P2_Analyze;
  P2_Analyze -> P2_Hypothesis;
  P2_Hypothesis -> P2_Verify;
  P2_Verify -> P2_Store;

  // Phase 2 to Phase 3
  P2_Store -> P3_Load [label="Memory"];

  // Phase 3 flow
  P3_Load -> P3_Generate;
  P3_Generate -> P3_Evaluate;
  P3_Evaluate -> P3_Select;
  P3_Select -> P3_Implement;
  P3_Implement -> P3_Store;

  // Phase 3 to Phase 4
  P3_Store -> P4_Load [label="Memory"];

  // Phase 4 flow
  P4_Load -> P4_CreateTest;
  P4_CreateTest -> P4_VerifyFail;
  P4_VerifyFail -> P4_ApplyFix [label="Test Fails\n(Good)"];
  P4_VerifyFail -> P4_CreateTest [label="Test Passes\n(Bad Test)", style=dashed, color=red];
  P4_ApplyFix -> P4_VerifyPass;
  P4_VerifyPass -> P4_Regression [label="Test Passes\n(Good)"];
  P4_VerifyPass -> P3_Generate [label="Test Fails\n(Rework Fix)", style=dashed, color=red];
  P4_Regression -> P4_Store;

  // Phase 4 to Phase 5
  P4_Store -> P5_Load [label="Memory"];

  // Phase 5 flow
  P5_Load -> P5_AddTest;
  P5_AddTest -> P5_Document;
  P5_Document -> P5_Monitor;
  P5_Monitor -> P5_Similar;
  P5_Similar -> P5_Store;

  // Final report
  P5_Store -> Report;
  Report -> UserReview;

  // Hooks integration (shown as annotations)
  Hook_PreTask [label="Hook: pre-task", shape=note, fillcolor=wheat];
  Hook_PostEdit [label="Hook: post-edit", shape=note, fillcolor=wheat];
  Hook_Notify [label="Hook: notify", shape=note, fillcolor=wheat];
  Hook_PostTask [label="Hook: post-task", shape=note, fillcolor=wheat];

  P1_Start -> Hook_PreTask [style=dotted, color=gray];
  P3_Implement -> Hook_PostEdit [style=dotted, color=gray];
  P4_Regression -> Hook_Notify [style=dotted, color=gray];
  Report -> Hook_PostTask [style=dotted, color=gray];

  // Agent legend
  subgraph cluster_legend {
    label="Agent Responsibilities";
    style=dashed;
    color=gray;

    Legend_Analyzer [label="code-analyzer\nPhases 1, 2, 5", fillcolor=lightgreen];
    Legend_Coder [label="coder\nPhases 2, 3, 5", fillcolor=lightcoral];
    Legend_Tester [label="tester\nPhases 4, 5", fillcolor=plum];
    Legend_Memory [label="Memory Store", shape=cylinder, fillcolor=lightyellow];

    Legend_Analyzer -> Legend_Coder [style=invis];
    Legend_Coder -> Legend_Tester [style=invis];
    Legend_Tester -> Legend_Memory [style=invis];
  }

  // Error handling paths
  Error_Reproduce [label="Cannot\nReproduce", shape=octagon, fillcolor=pink];
  Error_Complex [label="Too Complex\nfor Auto-Fix", shape=octagon, fillcolor=pink];
  Error_Regression [label="Regression\nFailures", shape=octagon, fillcolor=pink];

  P1_Classify -> Error_Reproduce [label="No repro", style=dashed, color=red];
  P2_Verify -> Error_Complex [label="Uncertain", style=dashed, color=red];
  P4_Regression -> Error_Regression [label="Tests fail", style=dashed, color=red];

  Error_Reproduce -> UserReview [label="Request help", style=dashed];
  Error_Complex -> UserReview [label="Escalate", style=dashed];
  Error_Regression -> P3_Generate [label="Revise fix", style=dashed];

  // Success metrics
  Metrics [label="Metrics Tracking:\n- Time to Root Cause\n- Fix Success Rate\n- Test Coverage Î”\n- Regression Rate", shape=note, fillcolor=lightcyan];
  Report -> Metrics [style=dotted, color=blue];
}
