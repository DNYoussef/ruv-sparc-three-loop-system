digraph TheaterDetectionAudit {
    rankdir=TB;
    node [shape=box, style="rounded,filled", fillcolor=lightblue, fontname="Arial"];
    edge [fontname="Arial"];

    start [label="Start: Codebase\nto Audit", fillcolor=lightgreen];

    // Understanding Theater
    theater [label="Understanding Code\nTheater", fillcolor=lightyellow, shape=folder];
    t1 [label="Mock Data &\nHardcoded Responses"];
    t2 [label="TODO & FIXME Markers"];
    t3 [label="Stub Functions &\nEmpty Implementations"];
    t4 [label="Commented-Out\nProduction Logic"];
    t5 [label="Simplified Error\nHandling"];
    t6 [label="Test Mode\nConditionals"];

    // Audit Methodology
    audit [label="Audit Methodology", fillcolor=lightcyan];
    p1 [label="Phase 1: Pattern-Based\nDetection\n• Search markers\n(TODO, FIXME, MOCK)\n• Suspicious constants\n• Stub functions\n• Mock patterns"];
    p2 [label="Phase 2: Contextual\nAnalysis\n• Read full context\n• Understand intent\n• Identify dependencies"];
    p3 [label="Phase 3: Dependency\nMapping\n• Create dependency graph\n• Determine order\n• External systems"];
    p4 [label="Phase 4: Risk Assessment\n• Criticality\n• Production failure risk\n• User visibility\n• Impact"];

    // Completion Workflow
    complete [label="Completion Workflow", fillcolor=lightyellow];
    c1 [label="Step 1: Understand\nIntended Behavior\n• Read specs\n• Consult stakeholders\n• Examine similar code"];
    c2 [label="Step 2: Design Production\nImplementation\n• External integrations\n• Auth requirements\n• Error handling\n• Logging"];
    c3 [label="Step 3: Implement with\nBest Practices\n• Proper error handling\n• Input validation\n• Security considerations\n• Code clarity"];
    c4 [label="Step 4: Test Thoroughly\n• Unit tests\n• Integration tests\n• Edge cases\n• Load tests"];
    c5 [label="Step 5: Review & Refine\n• Code review\n• Verify functionality\n• Check for new theater"];
    c6 [label="Step 6: Update\nDocumentation\n• API docs\n• Deployment docs\n• Test docs"];

    // Audit Reporting
    report [label="Audit Report", fillcolor=lightgreen];
    rep1 [label="Executive Summary\n• Theater count\n• Risk assessment\n• Effort estimate"];
    rep2 [label="Detailed Findings\n• Location\n• Pattern type\n• Risk level\n• Description"];
    rep3 [label="Dependency Analysis\n• Related instances\n• Completion order"];
    rep4 [label="Completion Roadmap\n• Phases by priority\n• Timeline estimates"];
    rep5 [label="Progress Tracking\n• Completed items\n• Remaining work"];
    rep6 [label="Deferred Theater\n• Why deferred\n• Expected completion\n• Mitigation"];

    // Decision Point
    decision [label="Theater Found?", shape=diamond, fillcolor=yellow];
    found [label="Theater Detected", fillcolor=lightcoral];
    clean [label="No Theater", fillcolor=lightgreen];

    output [label="Output: Production-Ready\nCode (Theater-Free)", fillcolor=lightgreen];

    // External references
    functionality [label="functionality-audit\n(Next: verify it works)", shape=cylinder, fillcolor=lightcoral];

    // Flow
    start -> theater;
    theater -> t1 -> t2 -> t3 -> t4 -> t5 -> t6;
    t6 -> audit;

    audit -> p1 -> p2 -> p3 -> p4;
    p4 -> decision;

    decision -> found [label="yes"];
    decision -> clean [label="no"];

    found -> complete;
    complete -> c1 -> c2 -> c3 -> c4 -> c5 -> c6;
    c6 -> report;

    report -> rep1 -> rep2 -> rep3 -> rep4 -> rep5 -> rep6;
    rep6 -> audit [label="verify completion", color=red];

    clean -> output;
    rep6 -> output [label="all completed"];

    // Cross-references
    output -> functionality [style=dashed, label="feeds to", color=green];

    // Labels
    labelloc="t";
    label="Theater Detection Audit: Eliminate Placeholders & Mock Code";
    fontsize=16;
    fontname="Arial Bold";
}
