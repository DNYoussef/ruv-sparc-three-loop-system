digraph AgentCreator {
    rankdir=TB;
    node [shape=box, style="rounded,filled", fillcolor=lightblue, fontname="Arial"];
    edge [fontname="Arial"];

    start [label="Start: Agent Creation Request", fillcolor=lightgreen];

    // Design Principles
    principles [label="Core Agent Design\nPrinciples", fillcolor=lightyellow, shape=folder];
    pr1 [label="Role Clarity &\nExpertise Modeling"];
    pr2 [label="Structured Cognitive\nFramework"];
    pr3 [label="Communication Protocol\nwith Parent Agent"];
    pr4 [label="Evidence-Based\nTechnique Integration"];
    pr5 [label="Failure Mode\nAnticipation"];

    // System Prompt Structure
    structure [label="Agent System Prompt\nStructure", fillcolor=lightyellow];
    s1 [label="1. Identity & Expertise\n• First-person perspective\n• Domain competencies"];
    s2 [label="2. Task Approach &\nMethodology\n• Step-by-step workflow\n• Evidence-based techniques"];
    s3 [label="3. Communication\nGuidelines\n• Parent protocol\n• Output formatting"];
    s4 [label="4. Domain-Specific\nKnowledge"];
    s5 [label="5. Guardrails & Failure\nMode Prevention"];
    s6 [label="6. Output Specification\n• Format\n• Structure\n• Requirements"];

    // 8-Step Process
    process [label="8-Step Agent Creation\nProcess", fillcolor=lightcyan];
    step1 [label="Step 1: Define Purpose\n& Scope\n• Specific role\n• Boundaries"];
    step2 [label="Step 2: Identify Required\nCapabilities & Knowledge"];
    step3 [label="Step 3: Select Evidence-\nBased Techniques\n• Self-consistency\n• Program-of-thought\n• Plan-and-solve"];
    step4 [label="Step 4: Design\nCommunication Protocol\n• Context input format\n• Progress reporting\n• Result output"];
    step5 [label="Step 5: Draft System\nPrompt\n• Follow structure"];
    step6 [label="Step 6: Create Supporting\nMaterials\n• Scripts\n• References\n• Assets"];
    step7 [label="Step 7: Test & Refine\n• Test cases\n• Consistency verification\n• Integration testing"];
    step8 [label="Step 8: Package &\nDocument"];

    // Claude Agent SDK Implementation
    sdk [label="Claude Agent SDK\nImplementation", fillcolor=lightgreen];
    sdk_ts [label="TypeScript SDK", fillcolor=lightcyan];
    ts_query [label="query() Function\n• One-off interactions"];
    ts_tools [label="Custom Tools with tool()\n• Zod validation"];
    ts_subagents [label="Subagent Definitions\n• AgentDefinition[]"];

    sdk_py [label="Python SDK", fillcolor=lightcyan];
    py_query [label="query() Function\n• Stateless"];
    py_client [label="ClaudeSDKClient\n• Stateful & conversational"];
    py_tools [label="@tool() Decorator\n• create_sdk_mcp_server()"];
    py_hooks [label="Hooks for Lifecycle\n• PreToolUse/PostToolUse"];

    // Permission & Security
    permissions [label="Permission Modes\n& Security", fillcolor=lightsalmon];
    pm_default [label="default\n• Prompt each tool"];
    pm_acceptedits [label="acceptEdits\n• Auto-approve Read"];
    pm_plan [label="plan\n• Show intent first"];
    pm_bypass [label="bypassPermissions\n• Auto-approve all"];

    output [label="Output: Production Agent\n+ SDK Implementation", fillcolor=lightgreen];

    // External references
    promptarch [label="prompt-architect\n(Evidence techniques)", shape=cylinder, fillcolor=lightcoral];

    // Flow
    start -> principles;
    principles -> pr1 -> pr2 -> pr3 -> pr4 -> pr5;
    pr5 -> structure;

    structure -> s1 -> s2 -> s3 -> s4 -> s5 -> s6;
    s6 -> process;

    process -> step1 -> step2 -> step3 -> step4 -> step5;
    step5 -> step6 -> step7 -> step8;
    step8 -> sdk;

    sdk -> sdk_ts;
    sdk -> sdk_py;

    sdk_ts -> ts_query -> ts_tools -> ts_subagents;
    sdk_py -> py_query -> py_client -> py_tools -> py_hooks;

    ts_subagents -> permissions;
    py_hooks -> permissions;

    permissions -> pm_default -> pm_acceptedits -> pm_plan -> pm_bypass;
    pm_bypass -> output;

    // Cross-references
    step3 -> promptarch [style=dashed, label="applies", color=red];
    s2 -> promptarch [style=dashed, label="uses", color=red];

    // Labels
    labelloc="t";
    label="Agent Creator: System Prompt Design + SDK Implementation";
    fontsize=16;
    fontname="Arial Bold";
}
