digraph CICDQualityLoop {
    rankdir=TB;
    compound=true;
    node [shape=box, style=filled, fontname="Arial"];
    edge [fontname="Arial"];

    // Start and end
    start [shape=ellipse, label="Start:\nCI/CD Failures\nDetected", fillcolor=lightgreen];
    end [shape=ellipse, label="Complete:\n100% Test Success", fillcolor=green, fontcolor=white];

    // Step 1: GitHub Hook Integration
    subgraph cluster_github {
        label="Step 1: GitHub Hook Integration";
        fillcolor=lightyellow;
        style=filled;

        gh1 [label="Configure\nGitHub Webhooks"];
        gh2 [label="Download Failure\nReports (gh run)"];
        gh3 [label="Parse Failure\nData"];

        gh1 -> gh2 -> gh3;
    }

    // Step 2: AI-Powered Analysis
    subgraph cluster_analysis {
        label="Step 2: AI-Powered Analysis";
        fillcolor=lightblue;
        style=filled;

        ai1 [label="Gemini Large-Context\nAnalysis"];
        ai2 [label="Spawn Research Agents\n(Parallel via Task)"];
        ai3 [label="Synthesize All\nAnalyses"];

        ai1 -> ai3;
        ai2 -> ai3;
    }

    // Step 3: Root Cause Detection
    subgraph cluster_rootcause {
        label="Step 3: Root Cause Detection";
        fillcolor=lightcyan;
        style=filled;

        rc1 [label="Build Failure\nDependency Graph"];
        rc2 [label="Find Root Causes\n(No Dependencies)"];
        rc3 [label="Connascence\nAnalysis"];

        rc1 -> rc2 -> rc3;
    }

    // Step 4: Intelligent Fixes
    subgraph cluster_fixes {
        label="Step 4: Intelligent Fixes";
        fillcolor=lightsalmon;
        style=filled;

        fix1 [label="Generate Fix\nStrategies"];
        fix2 [label="Sort by\nComplexity"];
        fix3 [label="Spawn Repair Agents\n(Parallel)"];
        fix4 [label="Apply Connascence-Aware\nFixes"];
        fix5 [label="Sandbox\nValidation"];

        fix1 -> fix2 -> fix3 -> fix4 -> fix5;
    }

    // Step 5: Theater Detection Audit
    subgraph cluster_theater {
        label="Step 5: Theater Detection Audit";
        fillcolor=orange;
        style=filled;

        th1 [label="Load Loop 2\nTheater Baseline"];
        th2 [label="Run Post-Fix\nTheater Scan"];
        th_decision [shape=diamond, label="Theater\nIncreased?", fillcolor=yellow];
        th_fail [shape=octagon, label="FAIL:\nFixes Introduced\nTheater", fillcolor=red, fontcolor=white];
        th3 [label="Differential\nTheater Analysis"];

        th1 -> th2 -> th_decision;
        th_decision -> th_fail [label="yes", color=red];
        th_decision -> th3 [label="no", color=green];
        th_fail -> fix3 [label="revise fixes", style=dashed, color=red];
    }

    // Step 6: Sandbox Validation
    subgraph cluster_sandbox {
        label="Step 6: Sandbox Validation";
        fillcolor=lightgreen;
        style=filled;

        sb1 [label="Create Production\nMirror Sandbox"];
        sb2 [label="Deploy Fixed\nCode"];
        sb3 [label="Run Comprehensive\nTest Suite"];
        sb_decision [shape=diamond, label="100%\nPass?", fillcolor=yellow];
        sb_fail [label="Analyze\nRemaining Failures"];

        sb1 -> sb2 -> sb3 -> sb_decision;
        sb_decision -> sb_fail [label="no", color=red];
        sb_fail -> rc1 [label="re-analyze", style=dashed, ltail=cluster_sandbox, lhead=cluster_rootcause];
    }

    // Step 7: Differential Analysis
    subgraph cluster_diff {
        label="Step 7: Differential Analysis";
        fillcolor=lightcyan;
        style=filled;

        diff1 [label="Compare Before\nvs After"];
        diff2 [label="Calculate\nImprovements"];
        diff3 [label="Generate Breakdown\nReport"];

        diff1 -> diff2 -> diff3;
    }

    // Step 8: GitHub Feedback
    subgraph cluster_feedback {
        label="Step 8: GitHub Feedback & Loop Closure";
        fillcolor=lightyellow;
        style=filled;

        fb1 [label="Push Fixed\nCode"];
        fb2 [label="Create PR with\nEvidence"];
        fb3 [label="Update GitHub\nActions Status"];
        fb4 [label="Generate Failure\nPattern Report"];
        fb5 [label="Store for Loop 1\nFeedback"];

        fb1 -> fb2 -> fb3 -> fb4 -> fb5;
    }

    // External references
    loop2 [shape=cylinder, label="Loop 2:\nDelivery Package\n+ Theater Baseline", fillcolor=lightcoral];
    loop1_feedback [shape=cylinder, label="Loop 1:\n(Next Iteration)\nHistorical Failures", fillcolor=lightcoral];

    // Main flow
    start -> gh1 [lhead=cluster_github];
    gh3 -> ai1 [ltail=cluster_github, lhead=cluster_analysis];
    ai3 -> rc1 [ltail=cluster_analysis, lhead=cluster_rootcause];
    rc3 -> fix1 [ltail=cluster_rootcause, lhead=cluster_fixes];
    fix5 -> th1 [ltail=cluster_fixes, lhead=cluster_theater];
    th3 -> sb1 [ltail=cluster_theater, lhead=cluster_sandbox];
    sb_decision -> diff1 [label="yes", color=green, lhead=cluster_diff];
    diff3 -> fb1 [ltail=cluster_diff, lhead=cluster_feedback];
    fb5 -> end [ltail=cluster_feedback];

    // Integration points
    loop2 -> start [label="provides\nbaseline data", style=dashed, color=blue];
    end -> loop1_feedback [label="feeds\nfailure patterns", style=dashed, color=purple];

    // Critical checkpoints
    validation [shape=octagon, label="CHECKPOINT:\nAll Root Causes\nResolved?", fillcolor=orange];
    rc2 -> validation [style=dashed];
    validation -> fix1 [label="yes", color=green];
    validation -> rc1 [label="no\n(more analysis)", color=red, style=dashed];

    labelloc="t";
    label="Loop 3: CI/CD Quality & Debugging Process\nGitHub Hooks → Analysis → Root Cause → Fix → Validate → Feedback";
    fontsize=16;
    fontname="Arial Bold";
}
