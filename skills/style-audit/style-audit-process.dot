digraph StyleAudit {
    rankdir=TB;
    node [shape=box, style="rounded,filled", fillcolor=lightblue, fontname="Arial"];
    edge [fontname="Arial"];

    start [label="Start: Functional Code\nto Improve", fillcolor=lightgreen];

    // Importance of Style
    importance [label="Why Code Style\nMatters?", fillcolor=lightyellow, shape=folder];
    i1 [label="Readability &\nComprehension"];
    i2 [label="Maintainability &\nEvolution"];
    i3 [label="Bug Prevention\nThrough Clarity"];
    i4 [label="Team Collaboration"];

    // Style Audit Methodology
    audit [label="Style Audit\nMethodology", fillcolor=lightcyan];
    p1 [label="Phase 1: Automated\nLinting\n• pylint/flake8/ESLint\n• Categorize issues"];
    p2 [label="Phase 2: Manual Style\nReview\n• Decomposition\n• Naming\n• Organization\n• Abstraction\n• Complexity"];
    p3 [label="Phase 3: Security &\nPerformance Review\n• Input validation\n• Auth/authz\n• Algorithmic efficiency"];
    p4 [label="Phase 4: Documentation\nReview\n• Module docs\n• Function docs\n• Inline comments\n• API docs"];
    p5 [label="Phase 5: Consistency\nAnalysis\n• Naming conventions\n• Formatting\n• Error handling\n• Patterns"];

    // Code Rewriting Workflow
    rewrite [label="Code Rewriting\nWorkflow", fillcolor=lightyellow];
    r1 [label="Step 1: Prioritize Issues\nby Impact\n• Security first\n• Readability\n• Maintainability\n• Performance"];
    r2 [label="Step 2: Validate\nFunctionality Before\nChanges\n• Ensure tests exist"];
    r3 [label="Step 3: Apply Automated\nFixes\n• Black/Prettier\n• Import organization"];
    r4 [label="Step 4: Refactor for\nClarity\n• Extract functions\n• Decompose large funcs\n• Simplify control flow"];
    r5 [label="Step 5: Improve Error\nHandling\n• Input validation\n• Specific exceptions\n• Meaningful messages"];
    r6 [label="Step 6: Enhance\nDocumentation\n• Docstrings\n• Type hints\n• README updates"];
    r7 [label="Step 7: Verify\nFunctionality After\nChanges"];
    r8 [label="Step 8: Commit Changes\nAtomically"];

    // Style Guidelines
    guidelines [label="Style Guidelines from\nBest Practices", fillcolor=lightsalmon];
    g1 [label="Function & Method Design\n• Small & focused\n• Clear names\n• Limited parameters"];
    g2 [label="Variable Naming & Scope\n• Descriptive names\n• Narrow scope\n• Named constants"];
    g3 [label="Code Organization\n• Logical grouping\n• Separation of concerns\n• Avoid deep nesting"];
    g4 [label="Error Handling\n• Explicit handling\n• Specific exceptions\n• Resource cleanup"];
    g5 [label="Performance\n• Avoid obvious inefficiencies\n• Profile before optimizing\n• Appropriate algorithms"];

    // CI/CD Integration
    cicd [label="CI/CD Pipeline\nIntegration", fillcolor=lightgreen];
    ci1 [label="Pre-commit Hooks\n• Linting\n• Formatting"];
    ci2 [label="CI Checks\n• Comprehensive linting\n• Type checking\n• Security scanning"];
    ci3 [label="Automated Code Review\n• Comment on PRs"];
    ci4 [label="Quality Metrics Tracking\n• Error counts\n• Coverage\n• Complexity"];

    // Report Structure
    report [label="Output Report", fillcolor=lightgreen];
    rep1 [label="Executive Summary\n• Issue count\n• % fixed\n• Overall assessment"];
    rep2 [label="Detailed Findings\n• By category\n• Location\n• Severity\n• Fix status"];
    rep3 [label="Refactoring Summary\n• What changed\n• Why changed\n• Tests verify"];
    rep4 [label="Remaining Issues\n• Why deferred\n• Effort estimate"];
    rep5 [label="Quality Metrics\n• Before/after comparison"];

    output [label="Output: Production-Grade\nMaintainable Code", fillcolor=lightgreen];

    // External references
    functionality [label="functionality-audit\n(Must pass first)", shape=cylinder, fillcolor=lightcoral];
    theater [label="theater-detection-audit\n(Theater removed first)", shape=cylinder, fillcolor=lightcoral];

    // Flow
    start -> importance;
    importance -> i1 -> i2 -> i3 -> i4;
    i4 -> audit;

    audit -> p1 -> p2 -> p3 -> p4 -> p5;
    p5 -> rewrite;

    rewrite -> r1 -> r2 -> r3 -> r4 -> r5 -> r6 -> r7 -> r8;
    r8 -> guidelines;

    guidelines -> g1 -> g2 -> g3 -> g4 -> g5;
    g5 -> cicd;

    cicd -> ci1 -> ci2 -> ci3 -> ci4;
    ci4 -> report;

    report -> rep1 -> rep2 -> rep3 -> rep4 -> rep5;
    rep5 -> output;

    // Cross-references
    start -> functionality [style=dashed, label="after", color=blue];
    start -> theater [style=dashed, label="after", color=blue];

    // Labels
    labelloc="t";
    label="Style Audit: Transform Functional to Production-Grade Code";
    fontsize=16;
    fontname="Arial Bold";
}
