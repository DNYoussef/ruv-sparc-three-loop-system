// Documentation Generation Process Flow
// Compile with: dot -Tsvg process-diagram.gv -o process-diagram.svg

digraph DocumentationGenerationProcess {
  // Graph settings
  rankdir=TB;
  node [shape=box, style="rounded,filled", fillcolor=lightblue, fontname="Arial"];
  edge [fontname="Arial", fontsize=10];

  // Define nodes
  start [label="Start:\nDocumentation\nRequest", shape=ellipse, fillcolor=lightgreen];

  // Phase 1: Analysis
  subgraph cluster_phase1 {
    label="Phase 1: Code Analysis";
    style=filled;
    fillcolor=lightyellow;

    scan [label="Scan Project\nStructure"];
    identify [label="Identify File\nTypes"];
    extract [label="Extract Functions\nClasses, APIs"];
    analyze [label="Analyze\nDocumentation Gaps"];
  }

  // Phase 2: Strategy
  subgraph cluster_phase2 {
    label="Phase 2: Documentation Strategy";
    style=filled;
    fillcolor=lightcyan;

    assess [label="Assess Current\nCoverage"];
    select [label="Select Standards\n(JSDoc, OpenAPI)"];
    plan [label="Plan Output\nStructure"];
  }

  // Phase 3: Generation
  subgraph cluster_phase3 {
    label="Phase 3: Content Generation";
    style=filled;
    fillcolor=lightpink;

    genAPI [label="Generate API\nDocumentation"];
    genREADME [label="Generate\nREADME"];
    genComments [label="Add Inline\nComments"];
    genDiagrams [label="Generate\nDiagrams"];
  }

  // Phase 4: Validation
  subgraph cluster_phase4 {
    label="Phase 4: Validation & Quality";
    style=filled;
    fillcolor=lightgoldenrod;

    checkCoverage [label="Check\nCoverage"];
    validateLinks [label="Validate\nLinks"];
    spellCheck [label="Spell Check\n& Format"];
  }

  // Phase 5: Integration
  subgraph cluster_phase5 {
    label="Phase 5: Integration & Deploy";
    style=filled;
    fillcolor=lavender;

    update [label="Update\nRepository"];
    cicd [label="Configure\nCI/CD"];
    deploy [label="Deploy Docs\nSite"];
    maintenance [label="Set Up\nMaintenance"];
  }

  // Decision nodes
  coverageOK [label="Coverage\n>= 80%?", shape=diamond, fillcolor=lightsalmon];
  linksOK [label="All Links\nValid?", shape=diamond, fillcolor=lightsalmon];

  // End
  end [label="Documentation\nComplete", shape=ellipse, fillcolor=lightgreen];

  // Flow connections - Phase 1
  start -> scan;
  scan -> identify;
  identify -> extract;
  extract -> analyze;

  // Flow Phase 1 to 2
  analyze -> assess;

  // Flow Phase 2
  assess -> select;
  select -> plan;

  // Flow Phase 2 to 3 (parallel generation)
  plan -> genAPI;
  plan -> genREADME;
  plan -> genComments;
  plan -> genDiagrams;

  // Flow Phase 3 to 4
  genAPI -> checkCoverage;
  genREADME -> checkCoverage;
  genComments -> checkCoverage;
  genDiagrams -> checkCoverage;

  // Flow Phase 4
  checkCoverage -> coverageOK;
  coverageOK -> validateLinks [label="Yes"];
  coverageOK -> genComments [label="No\nAdd More Docs", style=dashed, color=red];

  validateLinks -> linksOK;
  linksOK -> spellCheck [label="Yes"];
  linksOK -> genAPI [label="No\nFix Links", style=dashed, color=red];

  // Flow Phase 4 to 5
  spellCheck -> update;

  // Flow Phase 5
  update -> cicd;
  cicd -> deploy;
  deploy -> maintenance;

  // Flow to end
  maintenance -> end;

  // Metadata outputs
  subgraph cluster_outputs {
    label="Generated Outputs";
    style=filled;
    fillcolor=white;

    outAPI [label="docs/api.yml\nOpenAPI Spec", shape=note, fillcolor=white];
    outREADME [label="README.md\nProject Overview", shape=note, fillcolor=white];
    outComments [label="Source Files\nWith JSDoc", shape=note, fillcolor=white];
    outDiagrams [label="docs/diagrams/\nArchitecture SVGs", shape=note, fillcolor=white];
  }

  // Connect outputs
  genAPI -> outAPI [style=dotted];
  genREADME -> outREADME [style=dotted];
  genComments -> outComments [style=dotted];
  genDiagrams -> outDiagrams [style=dotted];

  // External tools/agents
  subgraph cluster_tools {
    label="Tools & Agents";
    style=filled;
    fillcolor=white;

    analyzer [label="code-analyzer\nAgent", shape=component, fillcolor=lightsteelblue];
    parser [label="AST Parser\n(Babel/TSC)", shape=component, fillcolor=lightsteelblue];
    renderer [label="Template\nRenderer", shape=component, fillcolor=lightsteelblue];
    graphviz [label="Graphviz\n(Diagrams)", shape=component, fillcolor=lightsteelblue];
  }

  // Tool connections
  extract -> parser [style=dotted, label="uses"];
  analyze -> analyzer [style=dotted, label="uses"];
  genAPI -> renderer [style=dotted, label="uses"];
  genDiagrams -> graphviz [style=dotted, label="uses"];

  // Legend
  subgraph cluster_legend {
    label="Legend";
    style=filled;
    fillcolor=white;

    legendNormal [label="Normal Flow", shape=box, style=rounded];
    legendDecision [label="Decision Point", shape=diamond];
    legendLoop [label="Loop Back", shape=box, style=rounded];

    legendNormal -> legendDecision [style=solid];
    legendDecision -> legendLoop [style=dashed, color=red, label="Retry"];
  }
}
