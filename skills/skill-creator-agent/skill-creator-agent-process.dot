digraph SkillCreatorAgent {
    rankdir=TB;
    node [shape=box, style="rounded,filled", fillcolor=lightblue, fontname="Arial"];
    edge [fontname="Arial"];

    start [label="Start: Agent-Based\nSkill Request", fillcolor=lightgreen];

    // Architecture Concept
    concept [label="Skills as Agent\nSpawners", fillcolor=lightyellow, shape=folder];
    c1 [label="Separation of Concerns\n• Skill: detection &\nresource mgmt\n• Agent: execution"];
    c2 [label="Consistent Expertise\n• Same agent every time"];
    c3 [label="Optimal Prompting\n• Evidence-based techniques"];
    c4 [label="Better Error Handling\n• Domain-specific"];
    c5 [label="Communication Protocol\n• Standardized"];

    // Architecture Layers
    layers [label="Two-Layer Architecture", fillcolor=lightcyan];
    skill_layer [label="Skill Layer", fillcolor=lightyellow];
    sl1 [label="Trigger Detection\n• Description field"];
    sl2 [label="Resource Preparation\n• Scripts/references"];
    sl3 [label="Context Gathering"];
    sl4 [label="Agent Spawning\n• Invoke specialist"];

    agent_layer [label="Agent Layer", fillcolor=lightyellow];
    al1 [label="Task Execution\n• Domain methodology"];
    al2 [label="Internal State\nManagement"];
    al3 [label="Error Detection\n& Recovery"];
    al4 [label="Result Formatting"];
    al5 [label="Status Reporting"];

    // 8-Step Creation Process
    process [label="8-Step Creation Process", fillcolor=lightcyan];
    step1 [label="Step 1: Define Skill Scope\n& Agent Role\n• Skill triggers\n• Agent executes"];
    step2 [label="Step 2: Design Agent Using\nagent-creator Skill"];
    step3 [label="Step 3: Define Context\nHandoff Protocol\n• User request\n• File paths\n• Constraints"];
    step4 [label="Step 4: Create Skill\nResources\n• Scripts\n• References\n• Assets"];
    step5 [label="Step 5: Implement Agent\nSpawning Logic\n• Gather context\n• Format package\n• Invoke agent"];
    step6 [label="Step 6: Define Result\nProcessing"];
    step7 [label="Step 7: Test Integration\n• Full workflow\n• Context handoff\n• Result processing"];
    step8 [label="Step 8: Package &\nDocument"];

    // SDK Implementation
    sdk [label="Claude Agent SDK\nImplementation", fillcolor=lightgreen];

    sdk_ts [label="TypeScript: Skill-Spawned\nAgent Pattern", fillcolor=lightcyan];
    ts_agent [label="AgentDefinition\n• Specialist config"];
    ts_spawn [label="Skill Execution Function\n• executeSkill()"];
    ts_multi [label="Multi-Agent Orchestration\n• Multiple specialists"];
    ts_tools [label="Custom Skill Tools\n• Domain-specific"];

    sdk_py [label="Python: Stateful Skill\nAgent Pattern", fillcolor=lightcyan];
    py_class [label="Skill Class\n• __init__ with agent prompt"];
    py_execute [label="execute() Method\n• ClaudeSDKClient"];
    py_multi [label="Multi-Agent Analysis\n• Specialist coordination"];
    py_hooks [label="Lifecycle Hooks\n• Pre/post spawning"];

    // Best Practices
    practices [label="Best Practices", fillcolor=lightsalmon];
    bp1 [label="Keep Skill Layer\nLightweight"];
    bp2 [label="Make Agent Layer\nComprehensive"];
    bp3 [label="Establish Clear\nContracts"];
    bp4 [label="Test Integration\nThoroughly"];
    bp5 [label="Provide Comprehensive\nDocumentation"];

    output [label="Output: Agent-Based Skill\n+ SDK Implementation", fillcolor=lightgreen];

    // External references
    agentcreator [label="agent-creator\n(Design specialist)", shape=cylinder, fillcolor=lightcoral];

    // Flow
    start -> concept;
    concept -> c1 -> c2 -> c3 -> c4 -> c5;
    c5 -> layers;

    layers -> skill_layer;
    layers -> agent_layer;

    skill_layer -> sl1 -> sl2 -> sl3 -> sl4;
    agent_layer -> al1 -> al2 -> al3 -> al4 -> al5;

    sl4 -> process;
    al5 -> process;

    process -> step1 -> step2 -> step3 -> step4;
    step4 -> step5 -> step6 -> step7 -> step8;
    step8 -> sdk;

    sdk -> sdk_ts;
    sdk -> sdk_py;

    sdk_ts -> ts_agent -> ts_spawn -> ts_multi -> ts_tools;
    sdk_py -> py_class -> py_execute -> py_multi -> py_hooks;

    ts_tools -> practices;
    py_hooks -> practices;

    practices -> bp1 -> bp2 -> bp3 -> bp4 -> bp5;
    bp5 -> output;

    // Cross-references
    step2 -> agentcreator [style=dashed, label="uses", color=red];

    // Labels
    labelloc="t";
    label="Skill-Creator-Agent: Agent-Based Skills + SDK Integration";
    fontsize=16;
    fontname="Arial Bold";
}
