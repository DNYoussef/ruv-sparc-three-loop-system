digraph SecurityAnalyzerWorkflow {
  // Graph styling
  rankdir=TB;
  bgcolor="transparent";
  node [shape=box, style="rounded,filled", fontname="Arial", fontsize=10];
  edge [fontname="Arial", fontsize=9];

  // Color scheme
  node [fillcolor="#e3f2fd", color="#1976d2"];

  // Start/End nodes
  start [label="Security Audit\nInitiated", shape=ellipse, fillcolor="#4caf50", fontcolor=white];
  end [label="Security Report\nGenerated", shape=ellipse, fillcolor="#4caf50", fontcolor=white];
  fail [label="Critical Issues\nFound - FAIL", shape=ellipse, fillcolor="#f44336", fontcolor=white];

  // Coordinator
  security_manager [label="Security Manager\n(Coordinator)", fillcolor="#ff9800", fontcolor=white];

  // Agents
  code_analyzer [label="Code Analyzer\nAgent", fillcolor="#2196f3", fontcolor=white];
  tester_agent [label="Tester\nAgent", fillcolor="#2196f3", fontcolor=white];

  // Memory storage
  memory [label="Shared Memory\nswarm/security/*", shape=cylinder, fillcolor="#9c27b0", fontcolor=white];

  // Phase 1: Static Analysis
  subgraph cluster_phase1 {
    label="Phase 1: Static Code Analysis";
    style=filled;
    fillcolor="#fff3e0";
    color="#f57c00";

    static_init [label="Initialize\nStatic Analysis"];
    sql_scan [label="SQL Injection\nDetection"];
    xss_scan [label="XSS\nDetection"];
    path_scan [label="Path Traversal\nDetection"];
    crypto_scan [label="Weak Crypto\nDetection"];
    static_store [label="Store Findings\nin Memory"];
    gate1 [label="Validation\nGate 1", shape=diamond, fillcolor="#ffeb3b"];

    static_init -> sql_scan;
    static_init -> xss_scan;
    static_init -> path_scan;
    static_init -> crypto_scan;
    sql_scan -> static_store;
    xss_scan -> static_store;
    path_scan -> static_store;
    crypto_scan -> static_store;
    static_store -> gate1;
  }

  // Phase 2: Dynamic Testing
  subgraph cluster_phase2 {
    label="Phase 2: Dynamic Security Testing";
    style=filled;
    fillcolor="#e8f5e9";
    color="#388e3c";

    dynamic_init [label="Start Application\n& Initialize Tests"];
    auth_test [label="Authentication\nBypass Tests"];
    csrf_test [label="CSRF\nTesting"];
    rate_test [label="Rate Limiting\nTests"];
    jwt_test [label="JWT Security\nTests"];
    dynamic_store [label="Store Test\nResults"];
    gate2 [label="Validation\nGate 2", shape=diamond, fillcolor="#ffeb3b"];

    dynamic_init -> auth_test;
    dynamic_init -> csrf_test;
    dynamic_init -> rate_test;
    dynamic_init -> jwt_test;
    auth_test -> dynamic_store;
    csrf_test -> dynamic_store;
    rate_test -> dynamic_store;
    jwt_test -> dynamic_store;
    dynamic_store -> gate2;
  }

  // Phase 3: Dependency Audit
  subgraph cluster_phase3 {
    label="Phase 3: Dependency Security Audit";
    style=filled;
    fillcolor="#f3e5f5";
    color="#7b1fa2";

    dep_init [label="Initialize\nDependency Scan"];
    npm_audit [label="NPM Audit\n(CVE Check)"];
    license_check [label="License\nCompliance"];
    sbom_gen [label="SBOM\nGeneration"];
    dep_store [label="Store Audit\nResults"];
    gate3 [label="Validation\nGate 3", shape=diamond, fillcolor="#ffeb3b"];

    dep_init -> npm_audit;
    dep_init -> license_check;
    dep_init -> sbom_gen;
    npm_audit -> dep_store;
    license_check -> dep_store;
    sbom_gen -> dep_store;
    dep_store -> gate3;
  }

  // Phase 4: Secrets Detection
  subgraph cluster_phase4 {
    label="Phase 4: Secrets Detection";
    style=filled;
    fillcolor="#fce4ec";
    color="#c2185b";

    secrets_init [label="Initialize\nSecrets Scan"];
    pattern_scan [label="Pattern-Based\nDetection"];
    entropy_scan [label="Entropy\nAnalysis"];
    env_scan [label="Environment\nVariable Check"];
    secrets_store [label="Store Secret\nFindings"];
    gate4 [label="Validation\nGate 4", shape=diamond, fillcolor="#ffeb3b"];

    secrets_init -> pattern_scan;
    secrets_init -> entropy_scan;
    secrets_init -> env_scan;
    pattern_scan -> secrets_store;
    entropy_scan -> secrets_store;
    env_scan -> secrets_store;
    secrets_store -> gate4;
  }

  // Phase 5: OWASP Compliance
  subgraph cluster_phase5 {
    label="Phase 5: OWASP Top 10 Compliance";
    style=filled;
    fillcolor="#e0f2f1";
    color="#00695c";

    owasp_init [label="Initialize OWASP\nCompliance Check"];
    owasp_checks [label="Automated\nOWASP Checks"];
    compliance_calc [label="Calculate\nCompliance Score"];
    owasp_store [label="Store Compliance\nReport"];
    gate5 [label="Validation\nGate 5", shape=diamond, fillcolor="#ffeb3b"];

    owasp_init -> owasp_checks;
    owasp_checks -> compliance_calc;
    compliance_calc -> owasp_store;
    owasp_store -> gate5;
  }

  // Final Report Generation
  consolidate [label="Consolidate\nAll Findings", fillcolor="#ff9800", fontcolor=white];
  generate_report [label="Generate\nSecurity Report", fillcolor="#ff9800", fontcolor=white];

  // Main workflow
  start -> security_manager;
  security_manager -> static_init;

  // Agent coordination
  static_init -> code_analyzer [style=dashed, label="spawn"];
  code_analyzer -> sql_scan [style=dashed];
  code_analyzer -> xss_scan [style=dashed];
  code_analyzer -> path_scan [style=dashed];
  code_analyzer -> crypto_scan [style=dashed];

  gate1 -> dynamic_init [label="PASS/WARN", color="green"];
  gate1 -> fail [label="CRITICAL", color="red"];

  dynamic_init -> tester_agent [style=dashed, label="spawn"];
  tester_agent -> auth_test [style=dashed];
  tester_agent -> csrf_test [style=dashed];
  tester_agent -> rate_test [style=dashed];
  tester_agent -> jwt_test [style=dashed];

  gate2 -> dep_init [label="PASS", color="green"];
  gate2 -> fail [label="CRITICAL", color="red"];

  dep_init -> security_manager [style=dashed, label="coordinate"];

  gate3 -> secrets_init [label="PASS/WARN", color="green"];
  gate3 -> fail [label="CRITICAL", color="red"];

  secrets_init -> code_analyzer [style=dashed, label="reuse"];

  gate4 -> owasp_init [label="PASS/WARN", color="green"];
  gate4 -> fail [label="CRITICAL", color="red"];

  owasp_init -> security_manager [style=dashed, label="coordinate"];

  gate5 -> consolidate [label="PASS/WARN", color="green"];
  gate5 -> fail [label="FAIL", color="red"];

  consolidate -> generate_report;
  generate_report -> end;

  // Memory interactions
  static_store -> memory [style=dotted, label="write"];
  dynamic_store -> memory [style=dotted, label="write"];
  dep_store -> memory [style=dotted, label="write"];
  secrets_store -> memory [style=dotted, label="write"];
  owasp_store -> memory [style=dotted, label="write"];

  consolidate -> memory [style=dotted, label="read all"];

  // Hooks integration (shown as annotations)
  hooks [label="Claude Flow Hooks\n• pre-task\n• post-task\n• session-restore\n• session-end", shape=note, fillcolor="#ffffcc"];

  security_manager -> hooks [style=dotted, color=gray, label="coordinates"];
  code_analyzer -> hooks [style=dotted, color=gray];
  tester_agent -> hooks [style=dotted, color=gray];

  // Legend
  subgraph cluster_legend {
    label="Legend";
    style=filled;
    fillcolor="#fafafa";
    color="#666666";

    leg_coord [label="Coordinator", fillcolor="#ff9800", fontcolor=white];
    leg_agent [label="Agent", fillcolor="#2196f3", fontcolor=white];
    leg_gate [label="Validation Gate", shape=diamond, fillcolor="#ffeb3b"];
    leg_memory [label="Shared Memory", shape=cylinder, fillcolor="#9c27b0", fontcolor=white];

    leg_coord -> leg_agent [style=invis];
    leg_agent -> leg_gate [style=invis];
    leg_gate -> leg_memory [style=invis];
  }
}
