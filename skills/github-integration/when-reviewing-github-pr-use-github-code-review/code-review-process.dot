digraph CodeReviewProcess {
    rankdir=TB;
    compound=true;
    node [shape=box, style=filled, fontname="Arial"];
    edge [fontname="Arial"];

    // Start and end
    start [shape=ellipse, label="Start:\nPR Review Request", fillcolor=lightgreen];
    end [shape=ellipse, label="Complete:\nReview Posted", fillcolor=green, fontcolor=white];

    // Initialization phase
    subgraph cluster_init {
        label="Phase 1: Initialization";
        fillcolor=lightyellow;
        style=filled;

        init_swarm [label="Initialize Mesh\nSwarm (5 agents)"];
        fetch_pr [label="Fetch PR\nContext & Diffs"];
        load_criteria [label="Load Review\nCriteria Standards"];

        init_swarm -> fetch_pr;
        fetch_pr -> load_criteria;
    }

    // Parallel review phase
    subgraph cluster_review {
        label="Phase 2: Parallel Agent Review";
        fillcolor=lightblue;
        style=filled;

        sec_review [label="Security Auditor:\nVulnerabilities & Secrets"];
        perf_review [label="Performance Analyzer:\nComplexity & Bottlenecks"];
        quality_review [label="Code Quality Analyst:\nStyle & Maintainability"];
        test_review [label="Test Engineer:\nCoverage & Quality"];
        docs_review [label="Documentation Reviewer:\nCompleteness & Clarity"];
    }

    // Synthesis phase
    subgraph cluster_synthesis {
        label="Phase 3: Synthesis & Reporting";
        fillcolor=lightcoral;
        style=filled;

        aggregate [label="Aggregate All\nAgent Findings"];
        generate_report [label="Generate\nComprehensive Report"];
        calculate_score [label="Calculate Merge\nReadiness Score"];

        aggregate -> generate_report;
        generate_report -> calculate_score;
    }

    // Auto-fix phase
    subgraph cluster_autofix {
        label="Phase 4: Auto-Fix Generation";
        fillcolor=lightsalmon;
        style=filled;

        sec_fixes [label="Security\nAuto-Fixes"];
        perf_fixes [label="Performance\nOptimizations"];
        quality_fixes [label="Code Quality\nRefactorings"];

        sec_fixes -> perf_fixes [style=dashed, label="parallel"];
        perf_fixes -> quality_fixes [style=dashed, label="parallel"];
    }

    // Integration phase
    subgraph cluster_integration {
        label="Phase 5: GitHub Integration";
        fillcolor=lightgreen;
        style=filled;

        format_comments [label="Format Review\nComments"];
        post_review [label="Post Review\nto GitHub"];
        add_labels [label="Apply Labels\n& Assignees"];

        format_comments -> post_review;
        post_review -> add_labels;
    }

    // Monitoring phase
    subgraph cluster_monitoring {
        label="Phase 6: Continuous Monitoring";
        fillcolor=lightyellow;
        style=filled;

        track_changes [label="Track PR\nUpdates"];
        trigger_rereview [label="Trigger\nRe-Review"];

        track_changes -> trigger_rereview [label="on change"];
    }

    // Decision point
    merge_decision [shape=diamond, label="Merge\nReadiness?", fillcolor=yellow];

    // External tools
    mcp_tools [shape=cylinder, label="MCP Tools:\nFlow-Nexus GitHub\nClaude Flow Swarm", fillcolor=lightcoral];
    github_api [shape=cylinder, label="GitHub API:\ngithub-api.sh\nREST & GraphQL", fillcolor=lightcoral];

    // Main flow
    start -> init_swarm;
    load_criteria -> sec_review [lhead=cluster_review, label="spawn 5 agents"];

    // Parallel review execution
    sec_review -> aggregate [style=dashed];
    perf_review -> aggregate [style=dashed];
    quality_review -> aggregate [style=dashed];
    test_review -> aggregate [style=dashed];
    docs_review -> aggregate [style=dashed];

    calculate_score -> merge_decision;

    // Decision outcomes
    merge_decision -> sec_fixes [lhead=cluster_autofix, label="fixes needed"];
    merge_decision -> format_comments [lhead=cluster_integration, label="ready"];

    add_labels -> track_changes [lhead=cluster_monitoring];
    trigger_rereview -> sec_review [lhead=cluster_review, style=dashed, label="re-review"];

    track_changes -> end [label="complete"];

    // External tool usage
    init_swarm -> mcp_tools [style=dashed, label="uses", dir=both];
    fetch_pr -> github_api [style=dashed, label="uses"];
    post_review -> github_api [style=dashed, label="uses"];

    // Critical warning
    no_critical [shape=octagon, label="STOP:\nCritical Security\nIssues Found", fillcolor=orange];
    merge_decision -> no_critical [label="critical issues", color=red];
    no_critical -> sec_fixes [label="must fix", color=red];

    labelloc="t";
    label="GitHub Code Review Process: Multi-Agent PR Review with Security, Performance, and Quality Analysis";
    fontsize=16;
    fontname="Arial Bold";
}
