digraph MultiRepoProcess {
    rankdir=TB;
    compound=true;
    node [shape=box, style=filled, fontname="Arial"];
    edge [fontname="Arial"];

    // Start and end
    start [shape=ellipse, label="Start:\nMulti-Repo\nOperation", fillcolor=lightgreen];
    end [shape=ellipse, label="Complete:\nSynchronized\nRelease", fillcolor=green, fontcolor=white];

    // Impact analysis phase
    subgraph cluster_analysis {
        label="Phase 1: Impact Analysis";
        fillcolor=lightyellow;
        style=filled;

        init_hierarchy [label="Initialize\nHierarchical Swarm"];
        build_depgraph [label="Build Dependency\nGraph"];
        analyze_impact [label="Coordinator:\nAnalyze Impact Scope"];
        identify_affected [label="Identify Affected\nRepositories"];

        init_hierarchy -> build_depgraph;
        build_depgraph -> analyze_impact;
        analyze_impact -> identify_affected;
    }

    // Parallel updates phase
    subgraph cluster_updates {
        label="Phase 2: Parallel Repository Updates";
        fillcolor=lightblue;
        style=filled;

        worker1 [label="Worker Agent 1:\nUpdate Repo A"];
        worker2 [label="Worker Agent 2:\nUpdate Repo B"];
        worker3 [label="Worker Agent 3:\nUpdate Repo C"];
        worker_n [label="Worker Agent N:\nUpdate Repo N"];

        test_integration [label="CI/CD Engineer:\nIntegration Tests"];

        worker1 -> test_integration [style=dashed];
        worker2 -> test_integration [style=dashed];
        worker3 -> test_integration [style=dashed];
        worker_n -> test_integration [style=dashed];
    }

    // Synchronized release phase
    subgraph cluster_release {
        label="Phase 3: Synchronized Release";
        fillcolor=lightcoral;
        style=filled;

        create_prs [label="Create PRs\nAcross All Repos"];
        coordinate_merge [label="Coordinator:\nMerge in Dependency Order"];
        tag_release [label="Tag & Release\nAll Repos"];

        create_prs -> coordinate_merge;
        coordinate_merge -> tag_release;
    }

    // Migration workflow
    subgraph cluster_migration {
        label="Workflow: Monorepo Migration";
        fillcolor=lightsalmon;
        style=filled;

        analyze_structure [label="Architect:\nAnalyze Monorepo"];
        create_repos [label="Create Target\nRepositories"];
        extract_history [label="Extract Code\nwith History"];
        refactor_deps [label="Refactor Cross-Repo\nDependencies"];

        analyze_structure -> create_repos;
        create_repos -> extract_history;
        extract_history -> refactor_deps;
    }

    // Compliance workflow
    subgraph cluster_compliance {
        label="Workflow: Architecture Enforcement";
        fillcolor=lightgreen;
        style=filled;

        define_standards [label="Define Architecture\nStandards"];
        scan_compliance [label="Code Analyzer:\nScan All Repos"];
        auto_remediate [label="Automated\nRemediation"];

        define_standards -> scan_compliance;
        scan_compliance -> auto_remediate;
    }

    // Decision points
    deps_order [shape=diamond, label="Respect\nDependency\nOrder?", fillcolor=yellow];
    migration_needed [shape=diamond, label="Monorepo\nMigration?", fillcolor=yellow];

    // External tools
    mcp_swarm [shape=cylinder, label="MCP Swarm:\nHierarchical\nCoordination", fillcolor=lightcoral];
    multi_repo_script [shape=cylinder, label="multi-repo.sh:\nBatch Operations\nSync Releases", fillcolor=lightcoral];
    dep_graph_tool [shape=cylinder, label="repo-graph.sh:\nDependency Analysis\nTopological Sort", fillcolor=lightcoral];

    // Main flow
    start -> init_hierarchy;
    identify_affected -> deps_order;

    deps_order -> worker1 [lhead=cluster_updates, label="yes:\nsequential by deps"];
    deps_order -> worker1 [lhead=cluster_updates, label="no:\nparallel"];

    test_integration -> create_prs [lhead=cluster_release];
    tag_release -> end;

    // Alternative workflows
    start -> migration_needed [style=dashed, label="if migrating"];
    migration_needed -> analyze_structure [lhead=cluster_migration, label="yes"];
    migration_needed -> init_hierarchy [label="no"];

    refactor_deps -> create_prs [lhead=cluster_release];

    // Compliance workflow trigger
    tag_release -> define_standards [lhead=cluster_compliance, style=dashed, label="enforce standards"];
    auto_remediate -> end [style=dashed];

    // External tool usage
    init_hierarchy -> mcp_swarm [style=dashed, label="uses", dir=both];
    build_depgraph -> dep_graph_tool [style=dashed, label="uses"];
    create_prs -> multi_repo_script [style=dashed, label="uses"];
    tag_release -> multi_repo_script [style=dashed, label="uses"];

    // Critical warnings
    circular_deps [shape=octagon, label="STOP:\nCircular Dependencies\nDetected", fillcolor=orange];
    build_breaks [shape=octagon, label="WARNING:\nIntegration Tests\nFailing", fillcolor=orange];

    build_depgraph -> circular_deps [style=dashed, label="if detected", color=red];
    circular_deps -> analyze_structure [lhead=cluster_migration, label="refactor required", color=red];

    test_integration -> build_breaks [style=dashed, label="on failure", color=red];
    build_breaks -> worker1 [lhead=cluster_updates, label="rollback & fix", color=red];

    labelloc="t";
    label="Multi-Repository Management Process: Coordinated Cross-Repo Operations with Dependency Awareness";
    fontsize=16;
    fontname="Arial Bold";
}
