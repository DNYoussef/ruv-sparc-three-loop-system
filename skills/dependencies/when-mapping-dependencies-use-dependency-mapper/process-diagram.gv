digraph DependencyMapperProcess {
  // Graph settings
  rankdir=TB;
  node [shape=box, style="rounded,filled", fontname="Arial", fontsize=10];
  edge [fontname="Arial", fontsize=9];

  // Color scheme
  node [fillcolor="#E3F2FD"];

  // Input
  input [label="Input\n(Project Path)", shape=ellipse, fillcolor="#C8E6C9"];

  // Phase 1: Discovery
  subgraph cluster_discovery {
    label="Phase 1: Discovery & Initialization";
    style=filled;
    fillcolor="#FFF3E0";

    detect [label="1.1 Detect\nProject Type"];
    config [label="1.2 Load\nConfiguration"];
    verify [label="1.3 Verify\nDependencies"];
  }

  // Phase 2: Extraction
  subgraph cluster_extraction {
    label="Phase 2: Dependency Extraction";
    style=filled;
    fillcolor="#F3E5F5";

    manifest [label="2.1 Parse\nManifest File"];
    lockfile [label="2.2 Parse\nLock File"];
    tree [label="2.3 Build\nDependency Tree"];
  }

  // Phase 3: Analysis
  subgraph cluster_analysis {
    label="Phase 3: Dependency Analysis";
    style=filled;
    fillcolor="#E8F5E9";

    circular [label="3.1 Detect\nCircular Deps"];
    duplicate [label="3.2 Find\nDuplicates"];
    depth [label="3.3 Analyze\nDepth"];
    outdated [label="3.4 Check\nOutdated"];
  }

  // Phase 4: Security
  subgraph cluster_security {
    label="Phase 4: Security Analysis";
    style=filled;
    fillcolor="#FFEBEE";

    vuln [label="4.1 Query\nVulnerabilities"];
    license [label="4.2 Check\nLicenses"];
    risk [label="4.3 Assess\nSupply Chain Risk"];
  }

  // Phase 5: Visualization
  subgraph cluster_visualization {
    label="Phase 5: Visualization Generation";
    style=filled;
    fillcolor="#E1F5FE"];

    graph [label="5.1 Prepare\nGraph Data"];
    html [label="5.2 Generate\nHTML Viz"];
    svg [label="5.3 Export\nSVG/PNG"];
    ascii [label="5.4 ASCII\nTree"];
  }

  // Phase 6: Reporting
  subgraph cluster_reporting {
    label="Phase 6: Report Generation";
    style=filled;
    fillcolor="#FFF9C4"];

    stats [label="6.1 Calculate\nStatistics"];
    recommend [label="6.2 Generate\nRecommendations"];
    assemble [label="6.3 Assemble\nReports"];
  }

  // Phase 7: Output
  subgraph cluster_output {
    label="Phase 7: Output & Caching";
    style=filled;
    fillcolor="#F3E5F5"];

    files [label="7.1 Write\nOutput Files"];
    cache [label="7.2 Cache\nResults"];
    console [label="7.3 Display\nSummary"];
  }

  // Output
  output [label="Output\n(Reports + Visualizations)", shape=ellipse, fillcolor="#C8E6C9"];

  // Main flow
  input -> detect;

  // Phase 1 flow
  detect -> config;
  config -> verify;

  // Phase 2 flow
  verify -> manifest;
  manifest -> lockfile;
  lockfile -> tree;

  // Phase 3 flow (parallel from tree)
  tree -> circular;
  tree -> duplicate;
  tree -> depth;
  tree -> outdated;

  // Phase 4 flow (parallel from tree)
  tree -> vuln;
  tree -> license;
  tree -> risk;

  // Convergence to Phase 5
  circular -> graph;
  duplicate -> graph;
  depth -> graph;
  outdated -> graph;
  vuln -> graph;
  license -> graph;
  risk -> graph;

  // Phase 5 flow (parallel)
  graph -> html;
  graph -> svg;
  graph -> ascii;

  // Phase 6 flow
  html -> stats;
  svg -> stats;
  ascii -> stats;
  stats -> recommend;
  recommend -> assemble;

  // Phase 7 flow
  assemble -> files;
  files -> cache;
  cache -> console;

  // Final output
  console -> output;

  // Error handling paths (dotted)
  edge [style=dotted, color=red];
  detect -> output [label="Error: Invalid project"];
  lockfile -> output [label="Error: Parse failed"];
  vuln -> output [label="Error: Network timeout"];

  // Cache shortcuts (dashed)
  edge [style=dashed, color=blue];
  cache -> console [label="Cache hit\n(skip analysis)"];

  // Parallel execution indicators
  edge [style=solid, color=green, constraint=false];
  circular -> duplicate [label="Parallel", style=invis];
  vuln -> license [label="Parallel", style=invis];
  html -> svg [label="Parallel", style=invis];
}
