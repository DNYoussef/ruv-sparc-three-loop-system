digraph functionality_audit {
  rankdir=LR;
  node [shape=box, style=rounded, fontname="Arial"];
  edge [fontname="Arial"];

  // Semantic styling
  start [label="Start\nFunctionality\nAudit", shape=ellipse, style=filled, fillcolor=lightgreen];
  end [label="Audit\nComplete", shape=ellipse, style=filled, fillcolor=lightblue];

  // Phase nodes
  phase1 [label="Phase 1\nSetup Testing\nEnvironment", shape=box, style="rounded,filled", fillcolor=lightyellow];
  phase2 [label="Phase 2\nExecute Code\nWith Realistic Inputs", shape=box, style="rounded,filled", fillcolor=lightyellow];
  phase3 [label="Phase 3\nDebug Issues", shape=box, style="rounded,filled", fillcolor=lightyellow];
  phase4 [label="Phase 4\nValidate\nFunctionality", shape=box, style="rounded,filled", fillcolor=lightyellow];
  phase5 [label="Phase 5\nReport Results", shape=box, style="rounded,filled", fillcolor=lightyellow];

  // Decision points
  tests_pass [label="All Tests\nPass?", shape=diamond, style=filled, fillcolor=lightcoral];
  fixes_work [label="Fixes\nSuccessful?", shape=diamond, style=filled, fillcolor=lightcoral];
  ready [label="Production\nReady?", shape=diamond, style=filled, fillcolor=lightcoral];

  // Workflow
  start -> phase1;
  phase1 -> phase2 [label="Sandbox Ready"];
  phase2 -> tests_pass;
  tests_pass -> phase5 [label="Yes\n(No Issues)"];
  tests_pass -> phase3 [label="No\n(Failures Found)"];
  phase3 -> phase4 [label="Fixes Applied"];
  phase4 -> fixes_work;
  fixes_work -> phase5 [label="Yes"];
  fixes_work -> phase3 [label="No\n(More Debugging)"];
  phase5 -> ready;
  ready -> end [label="Yes"];
  ready -> phase3 [label="No\n(Additional Work)"];

  // Agents subgraph
  subgraph cluster_agents {
    label="Agents";
    style=dashed;
    fontname="Arial";

    tester [label="Tester\n(Lead Phases 1,2)", shape=component, fillcolor=lightcyan, style=filled];
    coder [label="Coder\n(Lead Phase 3)", shape=component, fillcolor=lightcyan, style=filled];
    validator [label="Production\nValidator\n(Lead Phase 4)", shape=component, fillcolor=lightcyan, style=filled];
    reviewer [label="Reviewer\n(Lead Phase 5)", shape=component, fillcolor=lightcyan, style=filled];
  }

  // Memory coordination subgraph
  subgraph cluster_memory {
    label="Memory Coordination";
    style=dashed;
    fontname="Arial";

    mem1 [label="Phase 1:\nSandbox Config", shape=note, fillcolor=wheat, style=filled];
    mem2 [label="Phase 2:\nExecution Results", shape=note, fillcolor=wheat, style=filled];
    mem3 [label="Phase 3:\nRoot Causes", shape=note, fillcolor=wheat, style=filled];
    mem4 [label="Phase 4:\nReadiness Status", shape=note, fillcolor=wheat, style=filled];
    mem5 [label="Phase 5:\nFinal Report", shape=note, fillcolor=wheat, style=filled];
  }

  // Memory connections (dashed)
  phase1 -> mem1 [style=dashed, label="store"];
  mem1 -> phase2 [style=dashed, label="retrieve"];
  phase2 -> mem2 [style=dashed, label="store"];
  mem2 -> phase3 [style=dashed, label="retrieve"];
  phase3 -> mem3 [style=dashed, label="store"];
  mem3 -> phase4 [style=dashed, label="retrieve"];
  phase4 -> mem4 [style=dashed, label="store"];
  mem4 -> phase5 [style=dashed, label="retrieve"];
  phase5 -> mem5 [style=dashed, label="store"];

  // Quality gates
  gate1 [label="QG1:\nEnvironment\nValid?", shape=hexagon, fillcolor=lightpink, style=filled];
  gate2 [label="QG2:\nExecution\nComplete?", shape=hexagon, fillcolor=lightpink, style=filled];
  gate3 [label="QG3:\nNo\nRegressions?", shape=hexagon, fillcolor=lightpink, style=filled];

  phase1 -> gate1 [style=dotted];
  gate1 -> phase2 [style=dotted, label="Pass"];
  phase2 -> gate2 [style=dotted];
  gate2 -> tests_pass [style=dotted, label="Pass"];
  phase4 -> gate3 [style=dotted];
  gate3 -> fixes_work [style=dotted, label="Pass"];

  // Legend
  subgraph cluster_legend {
    label="Legend";
    style=dashed;
    fontname="Arial";

    legend_phase [label="Phase", shape=box, style="rounded,filled", fillcolor=lightyellow];
    legend_decision [label="Decision", shape=diamond, style=filled, fillcolor=lightcoral];
    legend_gate [label="Quality Gate", shape=hexagon, fillcolor=lightpink, style=filled];
    legend_memory [label="Memory Store", shape=note, fillcolor=wheat, style=filled];
    legend_agent [label="Agent", shape=component, fillcolor=lightcyan, style=filled];
  }
}
