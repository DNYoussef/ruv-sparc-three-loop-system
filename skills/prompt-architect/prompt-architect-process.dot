digraph PromptArchitect {
    rankdir=TB;
    node [shape=box, style="rounded,filled", fillcolor=lightblue, fontname="Arial"];
    edge [fontname="Arial"];

    start [label="Start: Prompt Request/Review", fillcolor=lightgreen];

    // Analysis Framework
    analysis [label="Core Prompt Analysis\nFramework", fillcolor=lightyellow];
    a_intent [label="Intent & Clarity\nAssessment"];
    a_structure [label="Structural Organization\nAnalysis"];
    a_context [label="Context Sufficiency\nEvaluation"];
    a_technique [label="Technique Application\nReview"];
    a_failure [label="Failure Mode\nDetection"];
    a_format [label="Formatting &\nAccessibility"];

    // Refinement Methodology
    refine [label="Prompt Refinement\nMethodology", fillcolor=lightyellow];
    r1 [label="1. Clarify Core Intent\n• Specific action verbs\n• Concrete operations"];
    r2 [label="2. Restructure for\nAttention & Flow\n• Beginning/end priority\n• Hierarchical org"];
    r3 [label="3. Add Necessary Context\n• Audience & purpose\n• Constraints explicit"];
    r4 [label="4. Apply Evidence-Based\nTechniques", fillcolor=lightcyan];
    r5 [label="5. Build in Quality\nMechanisms\n• Verification steps"];
    r6 [label="6. Address Edge Cases\n& Failure Modes"];
    r7 [label="7. Optimize Output\nSpecification"];

    // Evidence-Based Techniques
    techniques [label="Evidence-Based\nTechniques", fillcolor=lightcyan];
    t_selfcon [label="Self-Consistency\n• Multiple perspectives\n• Validate conclusions"];
    t_pot [label="Program-of-Thought\n• Step-by-step\n• Show work"];
    t_pas [label="Plan-and-Solve\n• Plan → Execute → Verify"];
    t_fewshot [label="Few-Shot Examples\n• 2-5 concrete examples"];
    t_cot [label="Chain-of-Thought\n• Explicit reasoning"];

    // Structural Optimization
    structure [label="Structural\nOptimization", fillcolor=lightsalmon];
    s_position [label="Context Positioning\n• Critical info at\nbeginning/end"];
    s_hierarchy [label="Hierarchical\nOrganization"];
    s_delimiters [label="Delimiter Strategy\n• ``` for code\n• XML tags"];
    s_length [label="Length Management\n• Balance comprehension"];

    // Anti-Patterns
    antipatterns [label="Check Anti-Patterns", fillcolor=pink, shape=diamond];
    ap_ref [label="Anti-Patterns Reference\n• Vague instructions\n• Contradictory reqs\n• Over-complexity\n• Insufficient context", shape=cylinder, fillcolor=lightcoral];

    output [label="Output: Optimized Prompt", fillcolor=lightgreen];

    // Flow
    start -> analysis;
    analysis -> a_intent -> a_structure -> a_context -> a_technique -> a_failure -> a_format;
    a_format -> refine;

    refine -> r1 -> r2 -> r3 -> r4;
    r4 -> techniques;
    techniques -> t_selfcon;
    techniques -> t_pot;
    techniques -> t_pas;
    techniques -> t_fewshot;
    techniques -> t_cot;

    t_selfcon -> r5;
    t_pot -> r5;
    t_pas -> r5;
    t_fewshot -> r5;
    t_cot -> r5;

    r5 -> r6 -> r7;

    r7 -> structure;
    structure -> s_position -> s_hierarchy -> s_delimiters -> s_length;

    s_length -> antipatterns;
    antipatterns -> ap_ref [label="reference", style=dashed];
    antipatterns -> output [label="pass"];
    antipatterns -> r1 [label="issues found", color=red];

    // Task Categories
    tasks [label="Task-Category\nSpecific Guidance", shape=note, fillcolor=lightyellow];
    tasks -> r4 [style=dotted, label="inform"];

    // Labels
    labelloc="t";
    label="Prompt Architect: Analysis & Refinement Framework";
    fontsize=16;
    fontname="Arial Bold";
}
